---
title: "Homework 1"
author: "Giovanni Lunetta"
date: "January 30, 2023"
format:
  html:
    code-fold: true
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
jupyter: python3
---

# Exercise 3
Monty Hall problem through simulation.

```{python}
# allows us to generate random numbers and make random selections
import random

# defines a function called monty_hall which takes two
# arguments. ndoors represents the number of doors in the
# experiment while ntrials represents the number of trials
# in the simulation.
def monty_hall(ndoors, ntrials):
    
    # initialze two variables to keep track of the number of wins
    switch_wins = 0
    no_switch_wins = 0
    
    # this for loop runs for ntrials
    for i in range(ntrials):

        # creates a list containing ndoors from 0 to ndoors-1 doors
        doors = [i for i in range(ndoors)]

        # randomly chooses one of these ndoors and assigns it to car
        # this variable will represent the door with the car behind it
        car = random.choice(doors)

        # randomly chooses one of these ndoors and assigns it to choice 
        # this variable will represent the door that the contestant initially 
        # chooses
        choice = random.choice(doors)

        # checks if the door the contestant initially chose is the door with the
        # car behind it. If it is, the no-switch strategy wins, otherwise the 
        # switch strategy wins
        if choice == car:
            no_switch_wins += 1
        else:
            switch_wins += 1
    
    # returns the proportion of wins for switch
    return switch_wins/ntrials

# stores the percentages in two different variables
win3 = monty_hall(3, 1000)*100
win5 = monty_hall(5, 1000)*100

print("When there are three doors, switching the door is the correct choice", win3)
print("percent of the time and the wrong choice", 100-win3, "percent of the time.\n")
print("When there are five doors, switching the door is the correct choice", win5)
print("percent of the time and the wrong choice", 100-win5, "percent of the time.")
```

# Exercise 4
Monte Carlo approximation of pi.
```{python}
# allows us to generate random numbers and make random selections
import random

# defines a function called monte_carlo_pi which takes one
# argument, n, which is the sample size
def monte_carlo_pi(n):

    # initializes a variable to keep track of the number of points
    #  that fall inside the unit circle
    inside = 0

    # starts a for loop that will run n times
    for i in range(n):
        # generates a random float number between -1 and 1 and assigns 
        # it to the variable x and y.
        x = random.uniform(-1, 1)
        y = random.uniform(-1, 1)

        # checks if the point (x, y) falls within the unit circle. 
        # If it does, increment the "inside" variable by 1
        if x**2 + y**2 <= 1:
            inside += 1
    
    # estimates pi by calculating the ratio of points inside the unit circle
    # to the total number of points generated. The result is multiplied by 4 
    # to account for the quarter of the unit circle that is being approximated.        
    pi_estimate = 4 * inside / n

    # calculates the standard deviation of the pi estimate, and multiply by 
    # 1.96 which corresponds to the 95% of confidence interval.
    pi_error = 1.96 * (4 * inside / n * (1 - inside / n) / n)**0.5

    # returns the estimate of pi and the 95% confidence interval as a tuple.
    return pi_estimate, (pi_estimate - pi_error, pi_estimate + pi_error)

print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 1000:", monte_carlo_pi(1000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 2000:", monte_carlo_pi(2000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 4000:", monte_carlo_pi(4000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 8000:", monte_carlo_pi(8000))
```

# Exercise 5
Find the first 10-digit prime number occurring in consecutive digits of pi.
```{python}
# importing these libraries allows us to use arbitrary-precision decimal 
# arithmetic and prime numbers
import decimal
from sympy import *

# defines the proper function
def find_10_digit_prime_in_e():

    # sets the precision of the decimal module to 10000, 
    # meaning that we will be working with 10000 decimal digits of e
    decimal.getcontext().prec = 10000

    # use the built-in function in python's decimal module to compute
    #  the value of e and store it in a variable e
    e = decimal.Decimal(1).exp()

    # convert the value of e to a string
    e = str(e)

    # remove the decimal point from the string representation of e
    e = e.replace(".", "")

    # starts a for loop that will run once for each possible starting 
    # index of a 10-digit sequence in the string e
    for i in range(len(e) - 10):

        # creates a variable named num that is set 
        # to the 10-digit sequence
        # starting at index i of the string e
        num = int(e[i:i+10])

        # if the number is prime it returns the number
        if isprime(num):
            return num

print(find_10_digit_prime_in_e())
print("Help from:")
print("https://stackoverflow.com/")
print("https://math.stackexchange.com/")
```
